// Code generated by go-bindata.
// sources:
// public/index.html
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _publicIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x5f\x6f\xe3\x36\x12\x7f\xf7\xa7\x98\xea\x7a\xb0\xdd\xb3\xa4\x78\xdb\x2b\x02\x45\x32\xb0\x48\xd2\xbd\x14\xdb\x36\xd7\x38\x4f\x8b\xc5\x82\x96\xc6\x16\x13\x8a\x24\x48\xca\x76\x36\xf5\x77\x3f\x90\x92\xf5\xc7\x76\x92\xc5\x01\x7d\xd9\xc8\x33\xc3\x99\xf9\xcd\x6f\x38\x24\x37\xfe\x2e\x13\xa9\x79\x92\x08\xb9\x29\xd8\x6c\x10\x57\x7f\x06\x71\x8e\x24\x9b\x0d\x00\xe2\x02\x0d\x81\x34\x27\x4a\xa3\x49\xbc\xd2\x2c\xfd\x73\x0f\x42\xa7\x32\xd4\x30\xb4\x5f\x00\xbf\xa8\x92\x1a\xb8\x33\x22\x7d\x84\xdf\x08\x27\x2b\x2c\x90\x1b\x6b\x14\x36\x56\x31\xa3\xfc\x11\x14\xb2\xc4\xd3\xe6\x89\xa1\xce\x11\x8d\x07\xb9\xc2\x65\xe2\xe5\xc6\x48\x1d\x85\x61\x9a\xf1\x07\x1d\xa4\x4c\x94\xd9\x92\x11\x85\x41\x2a\x8a\x90\x3c\x90\x6d\xc8\xe8\x42\x87\x1b\xca\x57\xa9\xd6\xe1\x59\x30\x0d\xce\xdd\xaf\xa0\xa0\x3c\x48\xb5\xde\x27\xe5\x5c\x57\x49\x51\x2e\x4b\xf3\xc9\xa2\x4b\x78\x59\x2c\x50\x7d\x86\x67\xa7\x00\xd8\xd0\xcc\xe4\x11\x4c\xcf\xce\xfe\x79\x51\x8b\x24\xc9\x32\xca\x57\x11\x4c\xdf\xc9\x2d\xbc\x3b\x93\xdb\xbd\xa6\x20\x6a\x45\x79\x04\xe7\x72\x0b\x67\x7b\x61\x46\xb5\x64\xe4\x29\x02\xca\x19\xe5\xe8\x2f\x98\x48\x1f\xf7\xca\x85\x50\x19\xaa\x08\xa6\x72\x0b\x5a\x30\x9a\xc1\x3f\xd2\x34\xed\x6b\x7d\x45\x32\x5a\xea\x08\x7e\x6a\x23\x2d\xc4\xd6\xd7\xf4\xab\x4b\xa3\xb6\x5a\x88\x46\xeb\x6f\x70\xf1\x48\x8d\x6f\x14\xe1\x9a\x1a\x2a\x78\x04\xc1\xbf\xf5\x5e\xfd\x82\x58\x94\xc6\x26\x18\xb5\xa9\x2f\x05\x37\xfe\x92\x14\x94\x3d\x45\x30\xfc\x43\x22\x87\x3b\xc2\xf5\x70\xa2\x51\xd1\x65\x65\xb5\x73\xdc\x35\xc5\x8c\xbf\xf3\x7d\xf8\x28\x48\x06\xef\xf9\xaa\x64\x44\xfd\x7a\x07\xbe\x5f\x15\x3c\x55\x54\x1a\xd0\x2a\x4d\xbc\xd0\x51\x15\xac\x84\x58\x31\x24\x92\xea\x03\xfa\x48\xb5\xf8\x41\x87\xd3\xe0\xa7\xe0\x7c\xff\xdb\x71\xf8\xa0\xbd\x59\x1c\x56\xde\xba\x8e\x1d\x7f\x9e\xc1\xad\x09\x1f\xc8\x9a\x54\x52\xaf\x62\x78\x4d\x14\x10\x29\x21\x81\xc6\x93\xc8\x4a\x86\x23\xcf\x35\x64\xdb\x89\xde\x04\x3e\x7d\x1e\x5f\x0c\xdc\xaa\x30\xbc\x14\xdc\x28\xc1\x18\x2a\xb8\x25\xca\x38\x29\x91\x32\x48\x1b\xf9\x91\x87\x76\x89\x37\x81\x65\xc9\x53\x5b\x68\x18\x7d\xaf\x53\x21\x71\x02\xdf\xdb\x06\x1e\xc3\xf3\xa0\xae\x71\x18\xde\x70\x6a\x28\x61\xf4\x2b\x82\x24\x2b\x84\x0d\x35\x39\x64\xb8\x24\x25\x33\x90\x11\x43\x60\x93\xd3\x34\x07\xaa\x61\xc1\x08\x7f\x04\xca\xc1\xe4\x54\x03\x6e\x49\x21\x19\xd6\x8e\xaa\x00\xc1\xd2\x66\xa3\x21\x81\x4f\x9f\x2f\x06\x07\x2a\xa1\x0a\x48\x9a\xd6\x06\xb8\xb9\x8a\xc0\x9f\x4e\x9a\xdf\xbf\x93\x02\x23\xf0\xbc\x56\xe2\x36\x6a\x04\x67\xb5\x60\x77\xd1\xa6\xfd\xbb\xd8\x00\xb3\x44\x9b\x1c\xab\x34\x97\x4a\x14\xa0\x51\xad\x51\xd5\x56\x5f\x14\x2e\x15\xea\xfc\x96\xac\xf0\x8a\x18\x32\x1a\x77\x1c\xfc\x67\x3e\xbf\x85\xdb\x3f\xee\xe6\xe1\xed\xfd\x1c\x0a\x34\xb9\xc8\x34\x2c\x85\x02\x92\x65\x21\x66\xd4\x40\x05\xa6\x8f\xa2\x94\x19\x31\x08\x49\xa7\xb6\xe3\x0e\x26\xcb\x74\xe5\x0b\x12\xf0\xbc\x8b\x9e\xa2\x54\xec\x84\xd4\x25\x9f\xc0\xf3\xae\x15\xd3\xe5\x9e\x31\x57\xb5\xe0\xe6\x0a\x92\x04\xfc\x69\x37\x92\xe3\x2e\xb3\xb4\x90\x85\x46\x6e\x40\x0b\x9b\x79\x9d\x34\xf8\x0e\x1b\x08\x89\x8a\xd8\x34\x3b\xeb\xda\xfc\xac\x49\x27\x1b\xa8\x33\x1c\x86\x44\xd2\xb0\x72\x34\xec\xaa\x6d\xaa\x81\xa5\x09\x92\x2e\xab\x4e\x74\x64\x57\x4d\xd9\xbe\xa1\x93\xb5\x96\x3b\x40\xa6\xf1\x10\xd4\x12\x2a\x5c\x52\xa1\x05\x36\x01\x6a\x86\x1a\x1c\x23\x0d\x1c\x8b\xef\xfe\x4d\x78\xf7\x6f\xa1\x0b\x87\xf0\x2f\xe8\x57\xfa\x6f\xc5\x3b\x68\x3e\xdd\x46\x1c\x3d\x1f\xe5\x1d\xd5\x7f\x27\xfd\xbc\x23\xfb\xcf\xe4\x20\x64\xd4\x8c\x13\x23\x7e\xd5\x82\x8f\xac\x70\xdc\xb5\xb2\xc7\x23\x2a\x1d\xf5\x4a\x0c\x30\xb4\x53\x02\xb9\xf1\xe7\x4f\x12\x87\x11\x0c\x89\x94\x8c\xa6\xae\x92\xe1\x83\x16\x7c\xd8\x31\xdf\xb5\xe9\x8f\x03\x93\x23\x1f\x7d\xd1\x65\x9a\xa2\xd6\x13\xf8\x82\x4a\x09\x35\xbe\x38\xb1\x41\xdd\xfe\xba\xba\xfe\x78\x3d\xbf\xf6\x21\x43\x86\x06\xab\xde\x84\xc5\x13\xd0\xac\xbf\xab\x14\x16\x62\xdd\xdf\x55\xce\xb6\xdb\xf0\x2f\x57\x6c\x58\x85\x19\x1e\xd5\xec\x88\x6a\xf7\x19\xdc\x5c\xfd\x7f\x90\x6e\x38\xa4\x44\x23\x88\x25\x74\xe6\xc3\x04\xa4\x90\x25\xb3\x53\xc1\x8d\x38\x37\x40\x2b\xa4\x96\x8f\x3e\x50\xb7\xee\x75\x98\x07\x7d\x66\xad\x5d\xd6\xfd\xa6\x3b\xea\x32\x48\x40\xda\xdb\xcf\x0d\x37\x95\xd3\x4a\x3c\x3e\xbd\xc4\x4e\x94\xa6\x1a\x27\xb0\xfe\x00\xb7\x8a\xae\x2d\xa6\xdf\xea\xc9\xf8\x43\xd8\xa7\xf6\xc3\xf5\xdc\x87\x15\x1a\x20\x8c\xed\x87\x4e\x6a\x0f\x9e\xb4\xb3\x1f\x1b\x9c\xc7\xa3\xf8\xdb\x98\xfd\x70\x3d\x7f\x9d\xd6\xe1\x11\x95\x4d\xcc\x9a\xd2\x4b\xc2\xd8\x82\xa4\x8f\x23\x85\x5a\x0a\xae\xb1\x3f\x45\x0f\x0f\xae\xbd\x55\x60\xc9\xeb\x6c\xdd\xce\x69\xea\x3a\xe4\x0d\xb7\xa9\xe0\x5a\x30\x0c\x98\x58\x35\x16\x81\x36\xc4\x94\x7a\x8e\x5b\xd3\xa1\x65\xd7\xf6\xda\xe0\xa8\x6c\x35\x86\x93\x41\x4e\x1d\x6f\x8d\x2e\x65\x48\xd4\x2f\x42\x15\xa3\xf1\xcb\xde\x1d\x90\x93\xbe\x09\x43\x65\x46\xbd\x5a\xc0\x5f\x7f\xc1\x6b\x48\x76\xed\x46\xb9\xb4\xc1\xdd\xc9\x6c\x9b\xed\x28\x6c\x27\xb7\xd7\x1b\xbf\x7b\x54\x9e\x6a\xf8\xb3\x57\x9a\xdb\x9f\xb6\x89\xb5\x65\x6e\x6f\x6e\x71\x58\xbd\x1d\x06\xf1\x42\x64\x4f\xc0\x57\x3e\x91\x32\x39\xba\x90\x59\x45\x7b\xdd\x3a\xd2\x77\xae\x5b\x33\x8b\x3f\xce\xe8\x1a\x52\x46\xb4\x4e\x3c\xbb\x8c\x50\xbe\x57\x01\xc4\xf9\x74\xf6\x41\x30\xc2\x57\x70\xa9\xca\x0c\xde\xb7\x53\x37\x0e\xf3\xe9\xde\x4a\xce\xe6\xf6\x7e\xd5\x99\xc9\x90\x61\x21\xb8\x36\x8a\x18\xd4\x90\x8b\x0d\x10\xa8\x1d\x75\xad\xa8\xbd\x8f\xd9\xac\x34\x10\xb8\xfc\xf3\xfe\x0a\x90\x67\x52\x50\x6e\xc0\x08\x28\x5c\xd2\x10\x63\x31\xab\x9a\x3d\x0e\xb1\x98\x05\x75\x91\x5c\xc8\xa2\xc1\x05\x94\x1b\x54\x4b\x92\x22\x50\xbe\x16\x8f\xa8\x1d\x9d\xce\xa9\xbd\x63\xd1\x14\x1b\xe7\x13\x30\x39\xa9\x57\x90\xd4\x54\x03\x90\xc0\xad\xd0\x2b\x85\x77\xff\xfd\xe8\xc6\xe0\x82\xe8\xfd\x55\x31\x88\x43\xd9\x54\xe4\xc7\xd9\xfb\x2c\x0b\xaf\xed\x58\x24\xd5\x18\x89\xc3\xfc\xc7\xbd\xda\x0d\x54\xbe\xf2\x75\xb9\x28\xa8\x7d\xd7\xb9\xdb\xd7\x68\x5c\xdf\xab\xfb\xf5\x56\x62\xd3\xc8\x0f\x99\x60\xfe\xcf\xde\x2c\x76\x2f\xad\xce\x4d\xdd\x03\xc9\x48\x8a\xb9\x60\x99\xe5\xd6\x76\x9d\x23\xbc\x10\x99\x7d\xfe\x35\xad\xe8\x81\xa6\x5f\x31\xf1\x7e\x3e\xb3\xcf\xb7\x38\xcc\xe8\xfa\xdb\x03\x55\x6f\xba\x83\x50\xae\x83\x8f\x62\xd5\xd2\x36\x58\x41\x79\xe2\x1d\x07\xed\xff\xe8\x06\xab\x0a\xe5\xc1\x9a\xb0\x12\x13\xef\x8e\xac\xb1\x7e\x71\xda\x55\x36\x48\xa7\xf2\xd5\x6b\xf8\x23\xd5\xbd\x9a\xbf\x50\xd1\x43\x98\xef\xbc\x99\x2d\x4d\x3f\x95\x63\x1b\x07\xa9\x63\x54\x7f\x9e\x0c\x65\xcb\xa1\x50\x22\x31\x89\x57\x1d\xa0\x94\xd7\x47\xcb\x6b\x69\x3c\x3f\x77\x4e\x48\xd8\xed\xde\x4a\xa9\xb1\xaf\xc6\xc8\x1b\x0b\xce\xbd\x59\x4c\xdc\x14\x60\x34\x7d\x4c\x3c\x7b\x82\x8f\xea\xf3\x7d\xec\xed\x2d\x17\x86\x7b\x33\xdb\xc5\x71\x48\x66\xd0\x5b\x50\xdd\x6d\x5e\x58\xf2\xa7\x53\xda\x45\x27\x6b\xb4\xff\x8a\x43\x3b\xa4\xdc\x87\xfb\x9f\x8f\xff\x05\x00\x00\xff\xff\x57\xed\x0c\xe0\x10\x11\x00\x00")

func publicIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_publicIndexHtml,
		"public/index.html",
	)
}

func publicIndexHtml() (*asset, error) {
	bytes, err := publicIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/index.html", size: 4368, mode: os.FileMode(420), modTime: time.Unix(1546511338, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"public/index.html": publicIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"public": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{publicIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
